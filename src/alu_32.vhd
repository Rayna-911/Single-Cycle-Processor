-- This file is generated by automatic tools.
library ieee;
use ieee.std_logic_1164.all;


entity alu_32 is
  port (
    ctrl  : in std_logic_vector(3 downto 0);
    A     : in std_logic_vector(31 downto 0);
    B     : in std_logic_vector(31 downto 0);
    cout  : out std_logic;  
    overf    : out std_logic;  
    ze    : out std_logic;
    R     : out std_logic_vector(31 downto 0) -- result
  );
end alu_32;

architecture alu_32_struct of alu_32 is

component alu_1 is port(
        ctrl_1 : in std_logic;
    ctrl_0 : in std_logic;
        c   : in std_logic;    
    A     : in std_logic;
    B     : in std_logic;


    cout  : out std_logic;  -- ‘1’ -> carry out
 --   of      : out std_logic;  -- '1' --> overflow
--and1, or1, mux21,not1, nor1, adder1: out std_logic;
    R     : out std_logic   );
end component;

component not_gate is port(    x   : in  std_logic;
    z   : out std_logic);
end component;

component xor_gate is port(    x   : in  std_logic;
    y   : in  std_logic;
    z   : out std_logic);
end component;

component nor_gate_32 is port(    x   : in  std_logic_vector(31 downto 0);
    m   : out std_logic
);
end component;

component mux4 is port(
    
    	sel1 : in	std_logic;
       sel0	  : in	std_logic;
	    src00  :	in	std_logic;
	    src01  :	in	std_logic;
	    src10  :	in	std_logic;
	    src11  :	in	std_logic;
	    z	  : out std_logic);
end component;

component sll_32 is port(    
   B    : in std_logic_vector(31 downto 0);
    A     : in std_logic_vector(31 downto 0);
    R     : out std_logic_vector(31 downto 0)); -- result
end component;

signal alu_out,c_out,sll_out,Rout: std_logic_vector(31 downto 0);
signal oflow,set, setu:std_logic;

begin

    alu0:  alu_1 port map(ctrl(1),ctrl(0),ctrl(0) , A(0), B(0), c_out(0), alu_out(0));
    alu1:  alu_1 port map(ctrl(1),ctrl(0),c_out(0), A(1), B(1), c_out(1), alu_out(1));
    alu2:  alu_1 port map(ctrl(1),ctrl(0),c_out(1), A(2), B(2), c_out(2), alu_out(2));
    alu3:  alu_1 port map(ctrl(1),ctrl(0),c_out(2), A(3), B(3), c_out(3), alu_out(3));
    alu4:  alu_1 port map(ctrl(1),ctrl(0),c_out(3), A(4), B(4), c_out(4), alu_out(4));
    alu5:  alu_1 port map(ctrl(1),ctrl(0),c_out(4), A(5), B(5), c_out(5), alu_out(5));
    alu6:  alu_1 port map(ctrl(1),ctrl(0),c_out(5), A(6), B(6), c_out(6), alu_out(6));
    alu7:  alu_1 port map(ctrl(1),ctrl(0),c_out(6), A(7), B(7), c_out(7), alu_out(7));
    alu8:  alu_1 port map(ctrl(1),ctrl(0),c_out(7), A(8), B(8), c_out(8), alu_out(8));
    alu9:  alu_1 port map(ctrl(1),ctrl(0),c_out(8), A(9), B(9), c_out(9), alu_out(9));
    alu10: alu_1 port map(ctrl(1),ctrl(0),c_out(9), A(10),B(10),c_out(10),alu_out(10));
    alu11: alu_1 port map(ctrl(1),ctrl(0),c_out(10),A(11),B(11),c_out(11),alu_out(11));
    alu12: alu_1 port map(ctrl(1),ctrl(0),c_out(11),A(12),B(12),c_out(12),alu_out(12));
    alu13: alu_1 port map(ctrl(1),ctrl(0),c_out(12),A(13),B(13),c_out(13),alu_out(13));
    alu14: alu_1 port map(ctrl(1),ctrl(0),c_out(13),A(14),B(14),c_out(14),alu_out(14));
    alu15: alu_1 port map(ctrl(1),ctrl(0),c_out(14),A(15),B(15),c_out(15),alu_out(15));
    alu16: alu_1 port map(ctrl(1),ctrl(0),c_out(15),A(16),B(16),c_out(16),alu_out(16));
    alu17: alu_1 port map(ctrl(1),ctrl(0),c_out(16),A(17),B(17),c_out(17),alu_out(17));
    alu18: alu_1 port map(ctrl(1),ctrl(0),c_out(17),A(18),B(18),c_out(18),alu_out(18));
    alu19: alu_1 port map(ctrl(1),ctrl(0),c_out(18),A(19),B(19),c_out(19),alu_out(19));
    alu20: alu_1 port map(ctrl(1),ctrl(0),c_out(19),A(20),B(20),c_out(20),alu_out(20));
    alu21: alu_1 port map(ctrl(1),ctrl(0),c_out(20),A(21),B(21),c_out(21),alu_out(21));
    alu22: alu_1 port map(ctrl(1),ctrl(0),c_out(21),A(22),B(22),c_out(22),alu_out(22));
    alu23: alu_1 port map(ctrl(1),ctrl(0),c_out(22),A(23),B(23),c_out(23),alu_out(23));
    alu24: alu_1 port map(ctrl(1),ctrl(0),c_out(23),A(24),B(24),c_out(24),alu_out(24));
    alu25: alu_1 port map(ctrl(1),ctrl(0),c_out(24),A(25),B(25),c_out(25),alu_out(25));
    alu26: alu_1 port map(ctrl(1),ctrl(0),c_out(25),A(26),B(26),c_out(26),alu_out(26));
    alu27: alu_1 port map(ctrl(1),ctrl(0),c_out(26),A(27),B(27),c_out(27),alu_out(27));
    alu28: alu_1 port map(ctrl(1),ctrl(0),c_out(27),A(28),B(28),c_out(28),alu_out(28));
    alu29: alu_1 port map(ctrl(1),ctrl(0),c_out(28),A(29),B(29),c_out(29),alu_out(29));
    alu30: alu_1 port map(ctrl(1),ctrl(0),c_out(29),A(30),B(30),c_out(30),alu_out(30));
    alu31: alu_1 port map(ctrl(1),ctrl(0),c_out(30),A(31),B(31),c_out(31),alu_out(31));
    
    cout<=c_out(31);
    

    not0: not_gate port map(c_out(31),setu);
    xor0: xor_gate port map(c_out(31),c_out(30),oflow);
    xor1: xor_gate port map(alu_out(31),oflow,set);
    
    overf<=oflow;
    sll0: sll_32 port map(A,B,sll_out);
    
    mux4_0: mux4 port map(ctrl(3),ctrl(2),alu_out(0),set,setu,sll_out(0),Rout(0));
    
    
    mux4_1: mux4 port map(ctrl(3),ctrl(2),alu_out(1),'0','0',sll_out(1),Rout(1));
    mux4_2: mux4 port map(ctrl(3),ctrl(2),alu_out(2),'0','0',sll_out(2),Rout(2));
    mux4_3: mux4 port map(ctrl(3),ctrl(2),alu_out(3),'0','0',sll_out(3),Rout(3));
    mux4_4: mux4 port map(ctrl(3),ctrl(2),alu_out(4),'0','0',sll_out(4),Rout(4));
    mux4_5: mux4 port map(ctrl(3),ctrl(2),alu_out(5),'0','0',sll_out(5),Rout(5));
    mux4_6: mux4 port map(ctrl(3),ctrl(2),alu_out(6),'0','0',sll_out(6),Rout(6));
    mux4_7: mux4 port map(ctrl(3),ctrl(2),alu_out(7),'0','0',sll_out(7),Rout(7));
    mux4_8: mux4 port map(ctrl(3),ctrl(2),alu_out(8),'0','0',sll_out(8),Rout(8));
    mux4_9: mux4 port map(ctrl(3),ctrl(2),alu_out(9),'0','0',sll_out(9),Rout(9));
    mux4_10: mux4 port map(ctrl(3),ctrl(2),alu_out(10),'0','0',sll_out(10),Rout(10));
    mux4_11: mux4 port map(ctrl(3),ctrl(2),alu_out(11),'0','0',sll_out(11),Rout(11));
    mux4_12: mux4 port map(ctrl(3),ctrl(2),alu_out(12),'0','0',sll_out(12),Rout(12));
    mux4_13: mux4 port map(ctrl(3),ctrl(2),alu_out(13),'0','0',sll_out(13),Rout(13));
    mux4_14: mux4 port map(ctrl(3),ctrl(2),alu_out(14),'0','0',sll_out(14),Rout(14));
    mux4_15: mux4 port map(ctrl(3),ctrl(2),alu_out(15),'0','0',sll_out(15),Rout(15));
    mux4_16: mux4 port map(ctrl(3),ctrl(2),alu_out(16),'0','0',sll_out(16),Rout(16));
    mux4_17: mux4 port map(ctrl(3),ctrl(2),alu_out(17),'0','0',sll_out(17),Rout(17));
    mux4_18: mux4 port map(ctrl(3),ctrl(2),alu_out(18),'0','0',sll_out(18),Rout(18));
    mux4_19: mux4 port map(ctrl(3),ctrl(2),alu_out(19),'0','0',sll_out(19),Rout(19));
    mux4_20: mux4 port map(ctrl(3),ctrl(2),alu_out(20),'0','0',sll_out(20),Rout(20));
    mux4_21: mux4 port map(ctrl(3),ctrl(2),alu_out(21),'0','0',sll_out(21),Rout(21));
    mux4_22: mux4 port map(ctrl(3),ctrl(2),alu_out(22),'0','0',sll_out(22),Rout(22));
    mux4_23: mux4 port map(ctrl(3),ctrl(2),alu_out(23),'0','0',sll_out(23),Rout(23));
    mux4_24: mux4 port map(ctrl(3),ctrl(2),alu_out(24),'0','0',sll_out(24),Rout(24));
    mux4_25: mux4 port map(ctrl(3),ctrl(2),alu_out(25),'0','0',sll_out(25),Rout(25));
    mux4_26: mux4 port map(ctrl(3),ctrl(2),alu_out(26),'0','0',sll_out(26),Rout(26));
    mux4_27: mux4 port map(ctrl(3),ctrl(2),alu_out(27),'0','0',sll_out(27),Rout(27));
    mux4_28: mux4 port map(ctrl(3),ctrl(2),alu_out(28),'0','0',sll_out(28),Rout(28));
    mux4_29: mux4 port map(ctrl(3),ctrl(2),alu_out(29),'0','0',sll_out(29),Rout(29));
    mux4_30: mux4 port map(ctrl(3),ctrl(2),alu_out(30),'0','0',sll_out(30),Rout(30));
    mux4_31: mux4 port map(ctrl(3),ctrl(2),alu_out(31),'0','0',sll_out(31),Rout(31));
    R <= Rout;
    nor0: nor_gate_32 port map(Rout,ze);
    
end  alu_32_struct;



